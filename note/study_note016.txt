1.伸缩布局(CSS3)
    1.响应式：随着屏幕大小的变化，内容也能变化
    2.语法：display: flex;(父盒子中) flex=1;(子盒子中)   类似于Android的权重
        1.如果要给子盒子设置权重，那么父盒子的宽或高必须是百分比，否则将缩放浏览器窗口将无效
    3.min-width：最小宽度不能小于的数值
    4.max-width：最大宽度不能超过的数值
    5.flex-direction
        1.row：横向从左到右排列（左对齐）
        2.row-reverse：对齐方式与row相反
        3.column：纵向从上往下排列（顶对齐）
        4.column-reverse：对齐方式与column相反
    6.justify-content，设置或检索弹性盒子元素在主轴（横轴）方向上的对齐方式，适用于：flex容器
        1.当弹性盒里一行上的所有子元素都不能伸缩或已经达到其最大值时，这一属性可协助对多余的空间进行分配。
            当元素溢出某行时，这一属性同样会在对齐上进行控制
        2.flex-start：弹性盒子元素将向行起始位置对齐，默认值
        3.flex-end：弹性盒子元素将向行结束位置对齐
        4.center：弹性盒子元素将向行中间位置对齐
        5.space-between：弹性盒子元素会平均地分布在行里
        6.space-around：弹性盒子元素会平均地分布在行里，两端保留子元素与子元素之间间距大小的一半，相当于设置了一个左边距和右边距，
    7.align-items：定义flex子项在flex容器的当前行的侧轴（纵轴）方向上的对齐方式，适用于：flex容器
        1.flex-start：弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴起始边界
        2.flex-end：弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴结束边界
        3.center：弹性盒子元素在该行的侧轴（纵轴）上居中放置。（如果该行的尺寸小于弹性盒子元素的尺寸，则会向两个方向溢出相同的长度）
        4.baseline：如弹性盒子元素的行内轴与侧轴为同一条，则该值与'flex-start'等效，其它情况下，该值将参与基线对齐
        5.stretch：如果指定侧轴大小的属性值为'auto'，则其值会使项目的边距盒的尺寸尽可能接近所在行的尺寸，但同时会遵照'min/max-width/height'属性的限制
    8.flex-wrap：该属性控制flex容器是单行或者多行，同时横轴的方向决定了新行堆叠的方向，适用于：flex容器
        1.nowrap：flex容器为单行，该情况下flex子项可能会溢出容器，默认值
        2.wrap：flex容器为多行。该情况下flex子项溢出的部分会被放置到新行，子项内部会发生断行
        3.wrap-reverse：反转 wrap 排列
    9.align-content：多行的垂直对齐，align-items是单行的
        1.必须对父元素设置display: flex，并设置排列方向为横列flex-direction: row，并设置换行flex-warp: warp时，此属性才会起作用
        2.flex-start：项目位于容器的开头
        3.flex-end：项目位于容器的结尾
        4.center：项目位于容器的中心
        5.space-between：项目位于各行之间留有空白的容器内
        6.space-around：项目位于各行之前、之间、之后都有空白的容器内
        7.stretch：项目被拉伸以适应容器
    10.order：设置或检索盒子元素出現的順序
        1.语法：order：<integer>，默认为0，数值小的排在前面。可以为负值
        2.适用于：flex子项和flex容器中的绝对定位子元素
2.flex-flow：
    1.是 flex-direction 和 flex-wrap 的复合简写形式
    2.语法：flex-flow：<' flex-direction '> || <' flex-wrap '>